__author__ = 'alipirani'

import sys
import os
import argparse
import errno
from config_settings import ConfigSectionMap
from check_subroutines import *
from stages import *
from remove_5_bp_snp_indel import *
from bedtools import *

################################################### Command Line Argument Parsing ###################################################
parser = argparse.ArgumentParser(description='Variant Calling pipeline for Illumina PE data.')
parser.add_argument('-PE1', action='store', dest="forward_raw", help='Path to Paired End file 1', required=True)
parser.add_argument('-PE2', action='store', dest="reverse_raw", help='Path to Paired End file 2', required=True)
parser.add_argument('-o', action='store', dest="output_folder", help='Output Path ending with output directory name to save the results', required=True)
parser.add_argument('-analysis', action='store', dest="analysis_name", help='Unique analysis name to save the results', required=True)
parser.add_argument('-c', action='store', dest="croplength", help='Crop Length in case needed')
parser.add_argument('-f', action='store', dest="bam_input", help='Input Bam')
parser.add_argument('-index', action='store', dest="index", help='Reference Index Name. Change this argument in config file and mention the reference header name such as KP_NTUH_chr/KPNIH1/KPNIH32.', required=True)
#parser.add_argument('-r', action='store', dest="reference", help='Reference Fasta File to build index in case index not built')
args = parser.parse_args()
############################################################### End #################################################################

print "\n################## Checking Dependencies ##################\n"
################################################### Check Subroutines: Arguments, Input files, Reference Index ######################
reference = ConfigSectionMap(args.index)['ref_path'] + "/" + ConfigSectionMap(args.index)['ref_name']
out_path = args.output_folder + "/"
make_sure_path_exists(out_path)
file_exists(args.forward_raw, args.reverse_raw, reference)
java_check()
config_file_backup = "cp ./config %s/%s_config_log" % (out_path, args.analysis_name)
os.system(config_file_backup)
################################################################### End ############################################################
print "\n############# End: Checking Dependencies ##################\n"


print "\n################## Cleaning Raw reads using Trimmomatic ##################\n"
################################################### Stages: Raw data Pre-processing using Trimmomatic ###############################
trimmomatic(args.forward_raw, args.reverse_raw, out_path, args.croplength)
####################################################################### End #########################################################
print "\n############# End: Cleaning Raw reads using Trimmomatic ##################\n"


print "\n################## Mapping Reads using BWA ##################\n"
#################################################### Stages: Alignment ##############################################################
split_field = prepare_readgroup(args.forward_raw)
files_to_delete = []
out_sam = align(args.bam_input, args.output_folder, args.index, split_field, args.analysis_name, files_to_delete)
#out_sam = "/nfs/esnitkin/Ali/Nextera_XT_lib_samples/varcall/snitkin6_S180_L001_R2_001/snitkin6_S180_L001_R2_001_aln.sam"
out_sorted_bam = prepare_bam(out_sam, out_path, args.analysis_name, files_to_delete)
#out_sorted_bam = "%s/%s_aln_marked.bam" % (out_path, args.analysis_name)
############################################################### End #################################################################
print "\n############# End: Mapping Reads using BWA ##################\n"


print "\n################## Creating BedGraph Coverage ##################\n"
#################################################### Stages: BedGraph Coverage ######################################################
bedgraph_coverage(out_sorted_bam, out_path, args.analysis_name, reference)
only_unmapped_positions_file = bedtools(out_sorted_bam, out_path, args.analysis_name)
######################################################### End #######################################################################
print "\n############# End: Creating BedGraph Coverage ##################\n"


print "\n################## Variant Calling ########################\n"
##################################################### Stages: Variant Calling #######################################################
caller = ConfigSectionMap("pipeline")['variant_caller']
if caller == "samtoolswithpostalignbam":
    print "\n################## Variant Calling using Samtools and post-align bam input files ##################\n"
    out_finalbam = post_align_bam(out_sorted_bam, out_path, args.index, args.analysis_name)
    final_raw_vcf = variant_calling(out_finalbam, out_path, args.index, args.analysis_name)
    print "The final raw VCF file: %s" % final_raw_vcf
    print "\n############################ END: samtoolswithpostalignbam Variant Calling. #######################\n"
elif caller == "gatkhaplotypecaller":
    print "\n################## Variant Calling using GATK haplotyper and post-align bam input files ##################\n"
    out_finalbam = post_align_bam(out_sorted_bam, out_path, args.index, args.analysis_name)
    final_raw_vcf = variant_calling(out_finalbam, out_path, args.index, args.analysis_name)
    print "The final raw VCF file: %s" % final_raw_vcf
    print "\n############################# END: gatkhaplotypecaller Variant Calling. ###################################\n"
elif caller == "samtools":
    print "\n################## Variant Calling using Samtools without post-align bam input files.##################\n"
    final_raw_vcf_mpileup = variant_calling(out_sorted_bam, out_path, args.index, args.analysis_name)
    #final_raw_vcf_mpileup = "%s/%s_aln_mpileup_raw.vcf" % (out_path, args.analysis_name)
    final_raw_vcf = remove_5_bp_snp_indel(final_raw_vcf_mpileup, out_path, args.analysis_name, reference)
    print "The final raw VCF file: %s" % final_raw_vcf
    print "\n################################ END: samtools Variant Calling. ########################################\n"
else:
    print "\nPlease provide Variant Caller name in config file under the section [pipeline].\n Options for Variant caller:\n samtools\nsamtoolswithpostalignbam\ngatkhaplotypecaller\n"
    exit()
    usage()
############################################################ End ####################################################################
print "\n################## End: Variant Calling ##################\n"


print "\n################## Variant Filteration #######################\n"
#################################################### Stages: Variant Filteration ####################################################
#filter1_variants(final_raw_vcf, out_path, args.analysis_name, args.index)
filter2_variants(final_raw_vcf, out_path, args.analysis_name, args.index)
################################################################## END ##############################################################
print "\n################## End: Variant Filteration ##################\n"



print "\n################## Generating Alignment and VCF Statistics #######################\n"
#################################################### Stages: Statistics #############################################################
alignment_stats_file = alignment_stats(out_sorted_bam, out_path, args.analysis_name)
########################################################## End ######################################################################
print "\n################## Calculating Depth of Coverage ##################################\n"
gatk_DepthOfCoverage(out_sorted_bam, out_path, args.analysis_name, reference)
########################################################## End ######################################################################
################################################### Stages: VCF Statistics ##########################################################
vcf_stats_file = vcf_stats(final_raw_vcf, out_path, args.analysis_name)
############################################################################ End ####################################################
print "\n############### END: Generating Alignment and VCF Statistics ######################\n"



print "\n################## Generating Qualimap Report #######################\n"
################################################### Stages: Qualimap ################################################################
qualimap_report = qualimap(out_sorted_bam, out_path, args.analysis_name)
########################################################## End ######################################################################

################################################### Stages: Remove Unwanted Intermediate files ######################################
# print "Removing Imtermediate Files...\n%s" % files_to_delete
# for files in files_to_delete:
#     os.remove(files)
# print "Removing Imtermediate Files...\n%s" % files_to_delete
# for files in files_to_delete:
#     os.remove(files)
############################################################################ End ####################################################








